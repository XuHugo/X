{"version":3,"sources":["utils/request.js","utils/config.js","view/login/tab_private.js","view/login/tab_mnemonic.js","view/login/tab_keystore.js","view/login/login.js","view/wallet/tab_txlist.js","view/wallet/wallet.js","view/wallet/token.js","view/wallet/menu.js","App.js","serviceWorker.js","index.js","service/service.js"],"names":["request","_x","_x2","_x3","_request","apply","this","arguments","_callee","url","data","type","ret","_Users_xuqiang_X_X_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","console","log","fetch","method","headers","Accept","Content-Type","credentials","body","JSON","stringify","sent","json","abrupt","stop","__webpack_exports__","urls","user","add","eth","sendtx","list","sendtoken","smartcontract","service","require","PrivateLogin","state","privateKey","handleCreateClick","newRandomKey","_this","setState","handleChange","e","_ref","name","value","Object","defineProperty","onPrivateLoginClick","key","err","checkPrivate","substring","toLowerCase","wallets","newWalletFromPrivateKey","PubSub","publish","alert","react_default","createElement","Form","size","Segment","Input","fluid","icon","iconPosition","placeholder","onChange","href","onClick","Button","color","Component","MmicLogin","mmic","pwd","path","handleGenMicc","genMmic","onMMICClick","_this$state","newWalletFromMmic","onSubmit","stacked","TextArea","KeyStoreLogin","keyStore","loading","handleKeyImport","checkJsonWallet","newWalletFromJson","then","catch","onFileChooseClick","Loader","active","inline","panes","menuItem","render","Tab","Pane","attached","tab_private_PrivateLogin","tab_mnemonic_MmicLogin","tab_keystore_KeyStoreLogin","Login","Grid","textAlign","verticalAlign","Column","style","maxWidth","marginTop","Header","as","Image","src","menu","text","Tab_txlist","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","from","to","hash","nonce","times","pending","List","Icon","success","content","Item","Content","Label","slice","config","ethers","fileSaver","Wallet","selectWallet","provider","walletInfo","activeWallet","txto","txvalue","activeItem","txlist","txPositive","exportLoading","onSendClick","checkAddress","isNaN","utils","parseEther","transaction","gasLimit","gasPrice","bigNumberify","chainId","getNetwork","sendRawTransaction","tx","updateActiveWallet","onExportPrivate","getActiveWallet","onExportClick","length","encrypt","blob","Blob","saveAs","handleItemClick","_ref2","loadActiveWalletInfo","loadActiveWalletTxList","wallet","address","connectWallet","info","infos","result","lili","ll","tab_txlist_Tab_txlist","time","push","balance","getAddress","getBalance","getTransactionCount","_this2","timer","setInterval","updateActiveWalletInfo","clearTimeout","balanceShow","formatEther","toString","columns","Row","stretched","width","action","labelPosition","actionPosition","defaultValue","required","raised","divided","relaxed","Token","Menu","wallet_Wallet","token_Token","vertical","menuPosition","App","login","loginEvent","onLoginSucc","msg","subscribe","unsubscribe","menu_Menu","login_Login","Container","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","PATH_PREFIX","realAddress","randomByte","randomBytes","toHexString","i","fromMnemonic","newRandomWallet","createRandom","getJsonWalletAddress","Promise","_Users_xuqiang_X_X_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","mark","resolve","reject","fromEncryptedJson","t0","HDNode","entropyToMnemonic","providerurl","providers","JsonRpcProvider","connect","sendTransaction","_callee2","signtx","txhash","_context2","sign"],"mappings":"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","file":"static/js/main.2bd62a09.chunk.js","sourcesContent":["\n\nexport  function arequest(url, data, type){\n\tconsole.log(\"arequest \")\n\tfetch(url ,{\n\t\tmethod: type,\n\t\theaders:{\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tcredentials: 'include',\n\t\tbody:JSON.stringify(data)\n\t})\n\t.then(function(response){\n\t\tconsole.log(response.json());\n\t\treturn response.json();\n\t})\n\t.then(function (jsonData) {\n\t\tconsole.log(jsonData);\n\t})\n\t.catch(function (){\n\t\tconsole.log(\"request error!!!\")\n\t})\n}\n\nexport default async function request(url, data, type){\n\tconsole.log(\"request \")\n\tlet ret = await fetch(url ,{\n\t\tmethod: type,\n\t\theaders:{\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tcredentials: 'include',\n\t\tbody:JSON.stringify(data)\n\t})\n\n\tret = await ret.json()\n\treturn ret\n}\n\n","\n\nexport default {\n    urls:{\n        user:{\n            add:\"/user\",\n        },\n        eth:{\n            sendtx:\"/eth/tx\",\n            list:\"/eth/txlist\",\n            sendtoken:\"/eth/token\",\n        },\n        smartcontract:{\n            apply:\"/smartcontrac\",\n        },\n\n    },\n};","import {Button, Form, Segment} from 'semantic-ui-react'\nimport React, {Component} from 'react'\nimport PubSub from 'pubsub-js'\n\nlet service = require('../../service/service')\n\nexport default class PrivateLogin extends Component {\n\n    state = {\n        privateKey: \"\",\n    }\n\n    handleCreateClick = () => {\n        let privateKey = service.newRandomKey()\n        this.setState({privateKey})\n    }\n\n    handleChange = (e, {name, value}) => {\n        this.setState({[name]: value})\n    }\n\n    onPrivateLoginClick = () => {\n        let key = this.state.privateKey\n        let err = service.checkPrivate(key)\n        if (err !== \"\") {\n            alert(err)\n            return;\n        }\n        if (key.substring(0, 2).toLowerCase() !== '0x') {\n            key = '0x' + key;\n        }\n        console.log(\"开始创建钱包\", key)\n        let wallets = service.newWalletFromPrivateKey(key)\n        if (wallets) {\n            PubSub.publish(\"onLoginSucc\", wallets)\n        } else {\n            alert(\"导入出错\")\n        }\n    }\n\n    render() {\n        return (\n            <Form size='large'>\n                <Segment>\n                    <Form.Input\n                        fluid icon='lock' iconPosition='left'\n                        placeholder='private key'\n                        name=\"privateKey\"\n                        value={this.state.privateKey}\n                        onChange={this.handleChange}/>\n\n                    <a href='#' onClick={this.handleCreateClick}>随机生成</a>\n                    <br/>\n                    <br/>\n                    <Button\n                        color='teal' fluid size='large'\n                        onClick={this.onPrivateLoginClick}>\n                        私钥导入\n                    </Button>\n                </Segment>\n            </Form>\n        )\n    }\n}\n","import {Button, Loader,Form, Grid, Header, Image, Message, Segment} from 'semantic-ui-react'\nimport PubSub from 'pubsub-js'\nimport React, {Component} from 'react'\n\nlet service = require('../../service/service')\n// disorder timber among submit tell early claw certain sadness embark neck salad\n\nexport default class MmicLogin extends Component {\n\n    state = {\n        privateKey: \"\",\n        mmic: \"\",\n        pwd: \"\",\n        path: \"m/44'/60'/0'/0/0\",\n    }\n    // 处理输入文本绑定\n    handleChange = (e, {name, value}) => {\n        this.setState({[name]: value})\n    }\n\n    // 生成助记词\n    handleGenMicc = () => {\n        let mmic = service.genMmic()\n        this.setState({mmic})\n    }\n\n    // 助记词导入\n    onMMICClick = () => {\n        let {mmic, path} = this.state\n        let wallets = service.newWalletFromMmic(mmic, path)\n        PubSub.publish(\"onLoginSucc\", wallets)\n    }\n\n    render() {\n        return (\n            <Form size='large' onSubmit={this.onMMICClick}>\n                <Segment stacked>\n                    <Form.TextArea\n                        placeholder='12 words'\n                        name=\"mmic\"\n                        value={this.state.mmic}\n                        onChange={this.handleChange}/>\n                    <Form.Input\n                        fluid\n                        icon='user'\n                        iconPosition='left'\n                        type='path'\n                        value={this.state.path}\n                        onChange={this.handleChange}\n                    />\n                    <a onClick={this.handleGenMicc}>随机生成</a>\n                    <br/>\n                    <br/>\n                    {/*<Form.Input*/}\n                    {/*fluid*/}\n                    {/*icon='lock'*/}\n                    {/*iconPosition='left'*/}\n                    {/*placeholder='Password'*/}\n                    {/*type='password'*/}\n                    {/*value={this.state.pwd}*/}\n                    {/*onChange={this.handleChange}*/}\n                    {/*/>*/}\n\n                    <Form.Button color='teal' fluid size='large'>\n                        助记词导入\n                    </Form.Button>\n\n                </Segment>\n            </Form>\n        )\n    }\n}\n","import {Button, Form, Grid, Header, Image, Loader, Message, Segment} from 'semantic-ui-react'\nimport PubSub from 'pubsub-js'\nimport _ethets2 from \"ethers\"\nimport React, {Component} from 'react'\n\nlet service = require('../../service/service')\n\nexport default class KeyStoreLogin extends Component {\n\n    state = {\n        keyStore: \"\",\n        pwd: '',\n        loading:false\n    }\n\n    handleChange = (e, {name, value}) => {\n        this.setState({[name]: value})\n    }\n\n    // 处理导入\n    handleKeyImport = () => {\n        let {keyStore, pwd} = this.state\n        if (keyStore==\"\"){\n            return\n        }\n        console.log(service.checkJsonWallet(keyStore))\n        this.setState({loading:true})\n        service.newWalletFromJson(keyStore, pwd).then(wallets => {\n            PubSub.publish(\"onLoginSucc\", wallets)\n            this.setState({loading:false})\n        }).catch(e => {\n            console.log(e)\n            alert(\"导入出错\" + e)\n            this.setState({loading:false})\n        })\n    }\n\n    onFileChooseClick = ()=>{\n    }\n\n    render() {\n        return (\n            <Form size='large'>\n                <Loader active={this.state.loading} inline />\n                <Segment>\n                    <Form.TextArea\n                        placeholder='keystore为json格式'\n                        name=\"keyStore\"\n                        value={this.state.keyStore}\n                        onChange={this.handleChange}/>\n\n                    <Form.Input\n                        fluid\n                        icon='lock'\n                        iconPosition='left'\n                        placeholder='Password'\n                        type='password'\n                        name = \"pwd\"\n                        value={this.state.pwd}\n                        onChange={this.handleChange}\n                    />\n                    <Button\n                        color='teal' fluid size='large'\n                            onClick={this.handleKeyImport}>\n                        导入\n                    </Button>\n                </Segment>\n            </Form>\n        )\n    }\n}\n","import React,{Component} from 'react'\n\nimport {Grid,Header, Image, Tab} from 'semantic-ui-react'\nimport PrivateLogin from \"./tab_private\"\nimport MmicLogin from \"./tab_mnemonic\"\nimport KeyStoreLogin from \"./tab_keystore\"\n\nconst panes = [\n    {menuItem: '私钥', render: () => <Tab.Pane attached={false}><PrivateLogin/></Tab.Pane>},\n    {menuItem: '助记词', render: () => <Tab.Pane attached={false}><MmicLogin/></Tab.Pane>},\n    {menuItem: 'KeyStore', render: () => <Tab.Pane attached={false}><KeyStoreLogin/></Tab.Pane>},\n]\n\nexport default class Login extends Component {\n    render() {\n        return (\n            <Grid textAlign='center'  verticalAlign='middle'>\n                <Grid.Column style={{maxWidth: 450, marginTop: 100}}>\n                    <Header as='h2' color='teal' textAlign='center'>\n                        <Image src='images/logo.png'/> EHT钱包\n                    </Header>\n                    <Tab menu={{text: true}} panes={panes} style={{maxWidth: 450}}/>\n                </Grid.Column>\n            </Grid>\n        )\n    }\n}\n","import React, {Component} from 'react'\nimport {Button, Header, Icon, Label, Segment,List} from \"semantic-ui-react\";\n\nexport default class Tab_txlist extends Component {\n    state = {\n        from: \"\",\n        to: \"\",\n        value: \"\",\n        hash: \"\",\n        nonce: \"\",\n        times: \"\",\n        state: \"\",\n    }\n\n    constructor(props) {\n        super(props)\n\n        this.state.from= props.from\n        this.state.to= props.to\n        this.state.value= props.value\n        this.state.hash= props.hash\n        this.state.nonce= props.nonce\n        this.state.times= props.times\n        this.state.state= props.state\n    }\n    pending=(<List.Icon loading name='ethereum' size='large' verticalAlign='middle' />)\n\n    success=(<List.Icon  name='ethereum' size='large' verticalAlign='middle' />)\n\n    render() {\n        let content = this.state.state===1 ?  this.pending : this.success\n        return (\n            <List.Item>\n                {content}\n                <List.Content>\n                    <Label color='teal' >\n                        <Icon name='barcode' /> {this.state.hash.slice(0,42)}\n                        <br />{this.state.hash.slice(42,)}\n                        <br />\n                        <br />\n                        <Icon name='sign-out' /> {this.state.from}\n                        <br />\n                        <br />\n                        <Icon name='sign-in' /> {this.state.to}\n                        <br />\n                        <br />\n                        <Icon name='pin' /> {this.state.nonce}\n                        <br />\n                        <br />\n                        <Icon name='cny' /> {this.state.value}\n                        <br />\n                        <br />\n                        <Icon name='wait' /> {this.state.times}\n                    </Label>\n                </List.Content>\n            </List.Item>\n        );\n    }\n}","import React, {Component} from 'react'\nimport {Grid, Form, Header, Loader, Button, Loading, Segment, Image, List,Menu,Icon,Label} from 'semantic-ui-react'\nimport request from '../../utils/request'\nimport config from '../../utils/config'\nimport Tab_txlist from '../wallet/tab_txlist'\n\nlet {urls} = config\nlet ethers = require('ethers')\nlet service = require('../../service/service')\nlet fileSaver = require('file-saver');\n\nexport default class Wallet extends Component {\n\n    state = {\n        wallets: [],// 支持多账户，默认第0个\n        selectWallet: 0,\n        //provider: \"http://127.0.0.1:8545\", //环境\n        provider:\"https://ropsten.infura.io/v3/19de6a4c0ccb416287b18bc81fa0b3b1\",\n\t\twalletInfo: [], // 钱包信息，获取为异步，单独存储下\n        activeWallet: {}, // 当前活跃钱包\n        txto: \"\", // 交易接收地址\n        txvalue: \"\", // 转账交易金额\n        pwd: \"\", // 导出keystore需要密码\n        activeItem: 'ETH',\n        txlist:'',\n\n        // UI状态表示\n        txPositive: false, //\n        loading: false,\n        exportLoading: false,\n\n    }\n\n    constructor(props) {\n        super(props)\n        this.state.wallets = props.wallets\n        this.state.selectWallet = props.wallets.length == 0 ? -1 : 0\n    }\n\n    // 更新钱包信息\n    updateActiveWallet() {\n        if (this.state.wallets.length == 0) {\n            return null\n        }\n        let activeWallet = this.getActiveWallet()\n        this.setState({activeWallet})\n        this.loadActiveWalletInfo(activeWallet)\n        this.loadActiveWalletTxList(activeWallet)\n\n        return activeWallet\n    }\n\n    // 获取当前的钱包\n    getActiveWallet() {\n        let wallet = this.state.wallets[this.state.selectWallet]\n        console.log(\"wallet addr\", wallet.address)\n        // 激活钱包需要连接provider\n        return service.connectWallet(wallet, this.state.provider)\n    }\n\n    async loadActiveWalletTxList(wallet) {\n        console.log(\"loadActiveWalletTxList\")\n        let address = wallet.address\n        let infos = await request(urls.eth.list, { address:address,}, \"POST\")\n        console.log(infos.result)\n        let lili=[]\n        for  (let info in infos.result){\n            let ll\n            console.log(infos.result[info].hash)\n            ll =(<Tab_txlist\n                from={infos.result[info].from}\n                to={infos.result[info].to}\n                hash={infos.result[info].hash}\n                nonce={infos.result[info].nonce}\n                value={infos.result[info].value}\n                times={infos.result[info].time}\n                state={infos.result[info].state}\n            />)\n            lili.push(ll)\n        }\n\n        this.setState({\n            txlist: lili\n        })\n    }\n\n    // 加载钱包信息\n    async loadActiveWalletInfo(wallet) {\n        let address,balance,tx\n        if (false){\n            address = wallet.address\n            let infos = await request(urls.user.add, { address:address,}, \"POST\")\n            balance = infos.balance\n            tx = infos.nonce\n        }\n        else{\n            address = await wallet.getAddress()\n            balance = await wallet.getBalance()\n            tx = await wallet.getTransactionCount()\n        }\n        this.setState({\n            walletInfo: [address, balance, tx]\n        })\n    }\n\n    async updateActiveWalletInfo() {\n        let wallet = this.state.wallets[this.state.selectWallet]\n        let address,balance,tx\n        address = wallet.address\n        let infos = await request(urls.eth.list, { address:address,}, \"POST\")\n        console.log(infos.result)\n        let lili=[]\n        for  (let info in infos.result){\n            let ll\n            ll =(<Tab_txlist\n                from={infos.result[info].from}\n                to={infos.result[info].to}\n                hash={infos.result[info].hash}\n                nonce={infos.result[info].nonce}\n                value={infos.result[info].value}\n                times={infos.result[info].time}\n                state={infos.result[info].state}\n            />)\n            lili.push(ll)\n        }\n        console.log(lili)\n        this.setState({\n            txlist: null\n        })\n        this.setState({\n            txlist: lili\n        })\n        //this.forceUpdate()\n        console.log(this.state.txlist)\n    }\n\n    // 发送交易\n    onSendClick = () => {\n        let {txto, txvalue, activeWallet} = this.state\n        // balance 为Object类型\n\n        console.log(\"balance\", activeWallet)\n        // 地址校验\n        let address = service.checkAddress(txto)\n        if (address == \"\") {\n            alert(\"地址不正确\")\n            return\n        }\n        console.log(txvalue, isNaN(txvalue))\n        if (isNaN(txvalue)) {\n            alert(\"转账金额不合法\")\n            return\n        }\n        // 以太币转换，发送wei单位\n        txvalue = ethers.utils.parseEther(txvalue);\n        console.log(\"txvalue\", txvalue)\n\n        // 设置加载loading，成功或者识别后取消loading\n        this.setState({loading: true})\n\t\tconsole.log(\"walletInfo;\",this.state.walletInfo[2])\n        let transaction = {\n\t\t\t\tnonce: this.state.walletInfo[2],\n\t\t\t\tgasLimit: 21000,\n\t\t\t\tgasPrice: ethers.utils.bigNumberify(\"20000000000\"),\n\t\t\t\tto: txto,\n\t\t\t\t// ... or supports ENS names\n\t\t\t\t// to: \"ricmoo.firefly.eth\",\n\t\t\t\tvalue: txvalue,\n\t\t\t\tdata: \"0x\",\n \t\t\t    // 这可确保无法在不同网络上重复广\n\t    \t    chainId: ethers.utils.getNetwork('ropsten').chainId\n\t\t}\n\n\t\tservice.sendRawTransaction(activeWallet, transaction)\n\t\t\t\t.then(tx=>{\n\t\t\t\t\t//console.log(tx);\n\t\t\t\t\talert(\"sendrawTraction ok!\",tx);\n\t\t\t\t\tthis.updateActiveWallet()\n\t\t\t\t\tthis.setState({loading: false, txto: \"\", txvalue: \"\"})\n\t\t\t\t})\n\t\t\t\t.catch(e=>{\n\t\t\t\t\tthis.setState({loading: false})\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t\talert(e);\n\t\t\t\t})\n    }\n\n    // 查看私钥\n    onExportPrivate = () => {\n        alert(this.getActiveWallet().privateKey)\n    }\n    // 导出keystore\n    onExportClick = () => {\n        let pwd = this.state.pwd;\n        if (pwd.length < 6) {\n            alert(\"密码长度不能小于6\")\n            return\n        }\n        this.setState({exportLoading: true})\n        // 通过密码加密\n        this.getActiveWallet().encrypt(pwd, false).then(json => {\n            let blob = new Blob([json], {type: \"text/plain;charset=utf-8\"})\n            fileSaver.saveAs(blob, \"keystore.json\")\n            this.setState({exportLoading: false})\n        });\n    }\n\n    // 页面加载完毕，更新钱包信息\n    componentDidMount() {\n        this.updateActiveWallet()\n        this.timer = setInterval(() => this.updateActiveWalletInfo(),  15000);\n    }\n\n      componentWillUnmount() {\n        this.timer && clearTimeout(this.timer);\n    }\n\n\n    handleChange = (e, {name, value}) => {\n        this.setState({[name]: value})\n    }\n\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n    render() {\n        // 金额显示需要手工转换\n        let wallet = this.state.walletInfo\n        if (wallet.length == 0) {\n            return <Loader active inline/>\n        }\n        let balance = wallet[1]\n        let balanceShow = ethers.utils.formatEther(balance) + \"(\" + balance.toString() + \")\"\n        let txlist = this.state.txlist\n        const { activeItem } = this.state.activeItem\n        return (\n            <div>\n                <Grid columns='equal' textAlign='center'>\n                    <Grid.Row stretched >\n                        <Grid.Column style={{maxWidth: 650, marginTop: 10}}>\n                            <Segment stacked textAlign='left'>\n                                <Header as='h1'>Account</Header>\n                                <Form.Input\n                                    style={{width: \"100%\"}}\n                                    action={{\n                                        color: 'teal',\n                                        labelPosition: 'left',\n                                        icon: 'address card',\n                                        content: '地址'\n                                    }}\n                                    actionPosition='left'\n                                    value={wallet[0]}\n                                />\n                                <br/>\n                                <Form.Input\n                                    style={{width: \"100%\"}}\n                                    action={{\n                                        color: 'teal',\n                                        labelPosition: 'left',\n                                        icon: 'ethereum',\n                                        content: '余额'\n                                    }}\n                                    actionPosition='left'\n                                    value={balanceShow}\n                                />\n                                <br/>\n                                <Form.Input\n                                    actionPosition='left'\n                                    action={{\n                                        color: 'teal',\n                                        labelPosition: 'left',\n                                        icon: 'numbered list',\n                                        content: '交易'\n                                    }}\n                                    style={{width: \"100%\"}}\n                                    value={wallet[2]}\n                                />\n                            </Segment>\n                            <Segment stacked textAlign='left'>\n                                <Header as='h1'>转账</Header>\n                                <Form.Input\n                                    style={{width: \"100%\"}}\n                                    action={{\n                                        color: 'teal',\n                                        labelPosition: 'left',\n                                        icon: 'address card',\n                                        content: '地址'\n                                    }}\n                                    actionPosition='left'\n                                    defaultValue='52.03'\n                                    type='text' name='txto' required value={this.state.txto}\n                                    placeholder='对方地址' onChange={this.handleChange}/>\n                                <br/>\n                                <Form.Input\n                                    style={{width: \"100%\"}}\n                                    action={{\n                                        color: 'teal',\n                                        labelPosition: 'left',\n                                        icon: 'ethereum',\n                                        content: '金额'\n                                    }}\n                                    actionPosition='left'\n                                    defaultValue='1.00'\n                                    type='text' name='txvalue' required value={this.state.txvalue}\n                                    placeholder='以太' onChange={this.handleChange}/>\n                                <br/>\n                                <Button\n                                    color='twitter'\n                                    style={{width: \"100%\"}}\n                                    size='large'\n                                    loading={this.state.loading}\n                                    onClick={this.onSendClick}>\n                                    确认\n                                </Button>\n                            </Segment>\n                            <Segment stacked textAlign='left'>\n                                <Header as='h1'>设置</Header>\n                                <Form.Input\n                                    style={{width: \"100%\"}}\n                                    action={{\n                                        color: 'teal',\n                                        labelPosition: 'left',\n                                        icon: 'lock',\n                                        content: '密码'\n                                    }}\n                                    actionPosition='left'\n                                    defaultValue='1.00'\n                                    type='pwd' name='pwd' required value={this.state.pwd}\n                                    placeholder='密码'\n                                    onChange={this.handleChange}/>\n                                <br/>\n                                <Button\n                                    color='twitter'\n                                    style={{width: \"48%\"}}\n                                    onClick={this.onExportPrivate}>\n                                    查看私钥\n                                </Button>\n                                <Button\n                                    color='twitter'\n                                    style={{width: \"48%\"}}\n                                    onClick={this.onExportClick}\n                                    loading={this.state.exportLoading}>\n                                    导出keystore\n                                </Button>\n                            </Segment>\n                        </Grid.Column>\n                        <Grid.Column style={{maxWidth: 650, marginTop: 10}}>\n                            <Segment stacked raised textAlign='left'>\n                                <Header as='h1'>TxList</Header>\n                                <List divided relaxed>\n                                    {txlist}\n                                </List>\n                            </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react'\nimport {Grid, Form, Header, Loader, Button, Loading, Segment, Image, List,Menu,Icon,Label} from 'semantic-ui-react'\nimport request from '../../utils/request'\nimport config from '../../utils/config'\nimport Tab_txlist from '../wallet/tab_txlist'\n\nlet {urls} = config\nlet ethers = require('ethers')\nlet service = require('../../service/service')\nlet fileSaver = require('file-saver');\n\nexport default class Token extends Component {\n\n    state = {\n        wallets: [],// 支持多账户，默认第0个\n        selectWallet: 0,\n        //provider: \"http://127.0.0.1:8545\", //环境\n        provider:\"https://ropsten.infura.io/v3/19de6a4c0ccb416287b18bc81fa0b3b1\",\n\t\twalletInfo: [], // 钱包信息，获取为异步，单独存储下\n        activeWallet: {}, // 当前活跃钱包\n        txto: \"\", // 交易接收地址\n        txvalue: \"\", // 转账交易金额\n        pwd: \"\", // 导出keystore需要密码\n        activeItem: 'ETH',\n        txlist:'',\n\n        // UI状态表示\n        txPositive: false, //\n        loading: false,\n        exportLoading: false,\n\n    }\n\n    constructor(props) {\n        super(props)\n        this.state.wallets = props.wallets\n        this.state.selectWallet = props.wallets.length == 0 ? -1 : 0\n    }\n\n    // 更新钱包信息\n    updateActiveWallet() {\n        if (this.state.wallets.length == 0) {\n            return null\n        }\n        let activeWallet = this.getActiveWallet()\n        this.setState({activeWallet})\n        this.loadActiveWalletInfo(activeWallet)\n        this.loadActiveWalletTxList(activeWallet)\n\n        return activeWallet\n    }\n\n    // 获取当前的钱包\n    getActiveWallet() {\n        let wallet = this.state.wallets[this.state.selectWallet]\n        console.log(\"wallet addr\", wallet.address)\n        // 激活钱包需要连接provider\n        return service.connectWallet(wallet, this.state.provider)\n    }\n\n    async loadActiveWalletTxList(wallet) {\n        console.log(\"loadActiveWalletTxList\")\n        let address = wallet.address\n        let infos = await request(urls.eth.list, { address:address,}, \"POST\")\n        console.log(infos.result)\n        let lili=[]\n        for  (let info in infos.result){\n            let ll\n            console.log(infos.result[info].hash)\n            ll =(<Tab_txlist\n                from={infos.result[info].from}\n                to={infos.result[info].to}\n                hash={infos.result[info].hash}\n                nonce={infos.result[info].nonce}\n                value={infos.result[info].value}\n                times={infos.result[info].time}\n                state={infos.result[info].state}\n            />)\n            lili.push(ll)\n        }\n\n        this.setState({\n            txlist: lili\n        })\n    }\n\n    // 加载钱包信息\n    async loadActiveWalletInfo(wallet) {\n        let address,balance,tx\n        if (false){\n            address = wallet.address\n            let infos = await request(urls.user.add, { address:address,}, \"POST\")\n            balance = infos.balance\n            tx = infos.nonce\n        }\n        else{\n            address = await wallet.getAddress()\n            balance = await wallet.getBalance()\n            tx = await wallet.getTransactionCount()\n        }\n        this.setState({\n            walletInfo: [address, balance, tx]\n        })\n    }\n\n    async updateActiveWalletInfo() {\n        let wallet = this.state.wallets[this.state.selectWallet]\n        let address,balance,tx\n        address = wallet.address\n        let infos = await request(urls.eth.list, { address:address,}, \"POST\")\n        console.log(infos.result)\n        let lili=[]\n        for  (let info in infos.result){\n            let ll\n            ll =(<Tab_txlist\n                from={infos.result[info].from}\n                to={infos.result[info].to}\n                hash={infos.result[info].hash}\n                nonce={infos.result[info].nonce}\n                value={infos.result[info].value}\n                times={infos.result[info].time}\n                state={infos.result[info].state}\n            />)\n            lili.push(ll)\n        }\n        console.log(lili)\n        this.setState({\n            txlist: null\n        })\n        this.setState({\n            txlist: lili\n        })\n        //this.forceUpdate()\n        console.log(this.state.txlist)\n    }\n\n    // 发送交易\n    onSendClick = () => {\n        let {txto, txvalue, activeWallet} = this.state\n        // balance 为Object类型\n\n        console.log(\"balance\", activeWallet)\n        // 地址校验\n        let address = service.checkAddress(txto)\n        if (address == \"\") {\n            alert(\"地址不正确\")\n            return\n        }\n        console.log(txvalue, isNaN(txvalue))\n        if (isNaN(txvalue)) {\n            alert(\"转账金额不合法\")\n            return\n        }\n        // 以太币转换，发送wei单位\n        txvalue = ethers.utils.parseEther(txvalue);\n        console.log(\"txvalue\", txvalue)\n\n        // 设置加载loading，成功或者识别后取消loading\n        this.setState({loading: true})\n\t\tconsole.log(\"walletInfo;\",this.state.walletInfo[2])\n        let transaction = {\n\t\t\t\tnonce: this.state.walletInfo[2],\n\t\t\t\tgasLimit: 21000,\n\t\t\t\tgasPrice: ethers.utils.bigNumberify(\"20000000000\"),\n\t\t\t\tto: txto,\n\t\t\t\t// ... or supports ENS names\n\t\t\t\t// to: \"ricmoo.firefly.eth\",\n\t\t\t\tvalue: txvalue,\n\t\t\t\tdata: \"0x\",\n \t\t\t    // 这可确保无法在不同网络上重复广\n\t    \t    chainId: ethers.utils.getNetwork('ropsten').chainId\n\t\t}\n\n\t\tservice.sendRawTransaction(activeWallet, transaction)\n\t\t\t\t.then(tx=>{\n\t\t\t\t\t//console.log(tx);\n\t\t\t\t\talert(\"sendrawTraction ok!\",tx);\n\t\t\t\t\tthis.updateActiveWallet()\n\t\t\t\t\tthis.setState({loading: false, txto: \"\", txvalue: \"\"})\n\t\t\t\t})\n\t\t\t\t.catch(e=>{\n\t\t\t\t\tthis.setState({loading: false})\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t\talert(e);\n\t\t\t\t})\n    }\n\n    // 查看私钥\n    onExportPrivate = () => {\n        alert(this.getActiveWallet().privateKey)\n    }\n    // 导出keystore\n    onExportClick = () => {\n        let pwd = this.state.pwd;\n        if (pwd.length < 6) {\n            alert(\"密码长度不能小于6\")\n            return\n        }\n        this.setState({exportLoading: true})\n        // 通过密码加密\n        this.getActiveWallet().encrypt(pwd, false).then(json => {\n            let blob = new Blob([json], {type: \"text/plain;charset=utf-8\"})\n            fileSaver.saveAs(blob, \"keystore.json\")\n            this.setState({exportLoading: false})\n        });\n    }\n\n    // 页面加载完毕，更新钱包信息\n    componentDidMount() {\n        this.updateActiveWallet()\n        this.timer = setInterval(() => this.updateActiveWalletInfo(),  15000);\n    }\n\n      componentWillUnmount() {\n        this.timer && clearTimeout(this.timer);\n    }\n\n\n    handleChange = (e, {name, value}) => {\n        this.setState({[name]: value})\n    }\n\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n    render() {\n        // 金额显示需要手工转换\n        let wallet = this.state.walletInfo\n        if (wallet.length == 0) {\n            return <Loader active inline/>\n        }\n        let balance = wallet[1]\n        let balanceShow = ethers.utils.formatEther(balance) + \"(\" + balance.toString() + \")\"\n        let txlist = this.state.txlist\n        const { activeItem } = this.state.activeItem\n        return (\n            <div>\n                <Grid columns='equal' textAlign='center'>\n                    <Grid.Row stretched >\n                        <Grid.Column style={{maxWidth: 650, marginTop: 10}}>\n                            <Segment stacked textAlign='left'>\n                                <Header as='h1'>Account</Header>\n                                <Form.Input\n                                    style={{width: \"100%\"}}\n                                    action={{\n                                        color: 'teal',\n                                        labelPosition: 'left',\n                                        icon: 'address card',\n                                        content: '地址'\n                                    }}\n                                    actionPosition='left'\n                                    value={wallet[0]}\n                                />\n                                <br/>\n                                <Form.Input\n                                    style={{width: \"100%\"}}\n                                    action={{\n                                        color: 'teal',\n                                        labelPosition: 'left',\n                                        icon: 'ethereum',\n                                        content: '余额'\n                                    }}\n                                    actionPosition='left'\n                                    value={balanceShow}\n                                />\n                                <br/>\n                                <Form.Input\n                                    actionPosition='left'\n                                    action={{\n                                        color: 'teal',\n                                        labelPosition: 'left',\n                                        icon: 'numbered list',\n                                        content: '交易'\n                                    }}\n                                    style={{width: \"100%\"}}\n                                    value={wallet[2]}\n                                />\n                            </Segment>\n                            <Segment stacked textAlign='left'>\n                                <Header as='h1'>转账</Header>\n                                <Form.Input\n                                    style={{width: \"100%\"}}\n                                    action={{\n                                        color: 'teal',\n                                        labelPosition: 'left',\n                                        icon: 'address card',\n                                        content: '地址'\n                                    }}\n                                    actionPosition='left'\n                                    defaultValue='52.03'\n                                    type='text' name='txto' required value={this.state.txto}\n                                    placeholder='对方地址' onChange={this.handleChange}/>\n                                <br/>\n                                <Form.Input\n                                    style={{width: \"100%\"}}\n                                    action={{\n                                        color: 'teal',\n                                        labelPosition: 'left',\n                                        icon: 'ethereum',\n                                        content: '金额'\n                                    }}\n                                    actionPosition='left'\n                                    defaultValue='1.00'\n                                    type='text' name='txvalue' required value={this.state.txvalue}\n                                    placeholder='以太' onChange={this.handleChange}/>\n                                <br/>\n                                <Button\n                                    color='twitter'\n                                    style={{width: \"100%\"}}\n                                    size='large'\n                                    loading={this.state.loading}\n                                    onClick={this.onSendClick}>\n                                    确认\n                                </Button>\n                            </Segment>\n                            <Segment stacked textAlign='left'>\n                                <Header as='h1'>设置</Header>\n                                <Form.Input\n                                    style={{width: \"100%\"}}\n                                    action={{\n                                        color: 'teal',\n                                        labelPosition: 'left',\n                                        icon: 'lock',\n                                        content: '密码'\n                                    }}\n                                    actionPosition='left'\n                                    defaultValue='1.00'\n                                    type='pwd' name='pwd' required value={this.state.pwd}\n                                    placeholder='密码'\n                                    onChange={this.handleChange}/>\n                                <br/>\n                                <Button\n                                    color='twitter'\n                                    style={{width: \"48%\"}}\n                                    onClick={this.onExportPrivate}>\n                                    查看私钥\n                                </Button>\n                                <Button\n                                    color='twitter'\n                                    style={{width: \"48%\"}}\n                                    onClick={this.onExportClick}\n                                    loading={this.state.exportLoading}>\n                                    导出keystore\n                                </Button>\n                            </Segment>\n                        </Grid.Column>\n                        <Grid.Column style={{maxWidth: 650, marginTop: 10}}>\n                            <Segment stacked raised textAlign='left'>\n                                <Header as='h1'>TxList</Header>\n                                <List divided relaxed>\n                                    {txlist}\n                                </List>\n                            </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n\n            </div>\n        )\n    }\n}\n","import React,{Component} from 'react'\n\nimport {Grid,Header, Image, Tab} from 'semantic-ui-react'\nimport Wallet from \"./wallet\"\nimport Token from \"./token\"\n\n\n\nexport default class Menu extends Component {\n\n    state = {\n        wallets: [],// 支持多账户，默认第0个\n    }\n\n    constructor(props) {\n        super(props)\n        this.state.wallets = props.wallets\n    }\n\n    render() {\n        let wallet = this.state.wallets\n        const panes = [\n            {menuItem: 'ETH', render: () => <Tab.Pane attached={false}><Wallet wallets={wallet}/></Tab.Pane>},\n            {menuItem: 'Token', render: () =>  <Tab.Pane attached={false}><Token wallets={wallet}/></Tab.Pane> },\n            {menuItem: 'smartcontract', render: () =>  <Tab.Pane>smartcontract Content</Tab.Pane> },\n            {menuItem: 'others', render: () =>  <Tab.Pane>others Content</Tab.Pane> },\n        ]\n\n        return (\n            <Grid textAlign='center'  verticalAlign='middle'>\n\n                <Grid.Column >\n                    <Header as='h2' color='teal' textAlign='center'>\n                        <Image src='images/logo.png'/> X钱包\n                    </Header>\n                    <Tab\n                        menu={{ fluid: true, vertical: true }}\n                        menuPosition='left'\n                        panes={panes}\n                    />\n                </Grid.Column>\n            </Grid>\n        )\n    }\n}","import React, {Component} from 'react';\nimport PubSub from \"pubsub-js\";\nimport './App.css';\nimport LoginForm from './view/login/login'\nimport Wallet from './view/wallet/wallet'\nimport Menu from './view/wallet/menu'\nimport {Container} from \"semantic-ui-react\";\nimport request from './utils/request'\nimport config from './utils/config'\n\nlet {urls} = config\n\nclass App extends Component {\n    state = {\n        login: false,\n        loading: false,\n        loginEvent: '',\n        wallets: []\n    }\n\n    componentWillMount() {\n        let loginEvent = PubSub.subscribe(\"onLoginSucc\", this.onLoginSucc)\n        this.setState({loginEvent})\n    }\n\n    onLoginSucc = (msg, data) => {\n        console.log(\"登陆成功\")\n        console.log(data)\n        this.setState({\n            login: true,\n            wallets: data\n        })\n    }\n\n    componentWillUnmount() {\n        PubSub.unsubscribe(this.state.loginEvent)\n    }\n\n    render() {\n        let {login} = this.state\n        //let content = login ? <Wallet wallets={this.state.wallets}/> : <LoginForm/>\n        let content = login ? <Menu wallets={this.state.wallets}/> : <LoginForm/>\n        return (\n            <Container>\n                {content}\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {BlockTag, Provider, TransactionRequest, TransactionResponse} from \"ethers/providers\";\nimport {Arrayish, BigNumber, ProgressCallback} from \"ethers/utils\";\nimport request from \"../utils/request\";\nimport config from '../utils/config'\n\nlet {urls} = config\nlet ethers = require('ethers')\n\n// 默认路径\nconst PATH_PREFIX = \"m/44'/60'/0'/0/\"\n\n// 私钥校验\nfunction checkPrivate(key) {\n    if (key === '') {\n        return \"不能为空\"\n    }\n    if (key.length != 66 && key.length != 64) {\n        return false, \"秘钥长度必须为66或者64\"\n    }\n    if (!key.match(/^(0x)?([0-9A-fa-f]{64})+$/)) {\n        return \"秘钥为16进制表示[0-9A-fa-f]\"\n    }\n    return \"\"\n}\n\n// 地址校验\nfunction checkAddress(address) {\n    try {\n        let realAddress =ethers.utils.getAddress(address)\n        console.log(\"realaddress\",realAddress)\n        return realAddress\n    }catch (e) {\n        return \"\"\n    }\n\n}\n\n// 随机私钥\nfunction newRandomKey() {\n    let randomByte = ethers.utils.randomBytes(32)\n    let randomNumber = ethers.utils.bigNumberify(randomByte);\n    return randomNumber.toHexString()\n}\n\n// 通过私钥创建钱包\nfunction newWalletFromPrivateKey(privateKey) {\n    let wallets = []\n    let wallet = new ethers.Wallet(privateKey)\n    wallets.push(wallet)\n    return wallets\n}\n\n// 通过助记词创建钱包\nfunction newWalletFromMmic(mmic, path) {\n    let wallets = []\n    for (let i = 0; i < 10; i++) {\n        path = PATH_PREFIX + i\n        let wallet = ethers.Wallet.fromMnemonic(mmic, path)\n        wallets.push(wallet)\n        console.log(i, wallets)\n    }\n    return wallets\n}\n\n// 随机创建钱包\nfunction newRandomWallet() {\n    let wallets = []\n    let wallet = ethers.Wallet.createRandom()\n    wallets.push(wallet)\n    return wallets\n}\n\n// 校验地址\nfunction checkJsonWallet(data) {\n    return ethers.utils.getJsonWalletAddress(data)\n}\n\n// 从keystore导入钱包，需要密码\nfunction newWalletFromJson(json, pwd) {\n\n    return new Promise(async (resolve, reject) => {\n        try {\n            let wallets = []\n            let wallet = await ethers.Wallet.fromEncryptedJson(json, pwd, false)\n            wallets.push(wallet)\n            resolve(wallets)\n        } catch (e) {\n            reject(e)\n        }\n    })\n}\n\n// 生成助记词\nfunction genMmic() {\n    let words = ethers.utils.HDNode.entropyToMnemonic(ethers.utils.randomBytes(16));\n    return words\n}\n\n// 连接provider\nfunction connectWallet(wallet, providerurl) {\n    let provider = new ethers.providers.JsonRpcProvider(providerurl);\n    return wallet.connect(provider);\n}\n\n// 发送交易\nfunction sendTransaction(wallet,to,value) {\n    return wallet.sendTransaction({\n        to: to,\n        value: value,\n    })\n}\n\n//签名交易\nasync function  sendRawTransaction(wallet,transaction){\n\tlet signtx = await wallet.sign(transaction)\n\tconsole.log(signtx)\n\ttransaction[\"from\"]=wallet.address\n    transaction[\"rawtx\"]=signtx\n    transaction[\"token\"]=false\n    let txhash = await request(urls.eth.sendtx, transaction, \"POST\")\n\tconsole.log(txhash)\n\treturn txhash\n}\n\nexport {\n    checkPrivate,\n    checkAddress,\n    newRandomKey,\n    newWalletFromPrivateKey,\n    newWalletFromMmic,\n    newRandomWallet,\n    genMmic,\n    newWalletFromJson,\n    checkJsonWallet,\n    connectWallet,\n    sendTransaction,\n\tsendRawTransaction,\n}\n"],"sourceRoot":""}